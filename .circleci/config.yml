version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1
         
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      memstash-token:
        description: Memstash token for migration result
        type: string
        default: "token:migrationstatus_${CIRCLE_WORKFLOW_ID}"     
    steps:
      - run:
          name: Revert migrations
          when: on_fail 
          command: |
            SUCCESS=$(curl -H "Content-Type: text/plain" -H << parameters.memstash-token >> --request GET https://api.memstash.io/values/migrationStatus)
            if [ $SUCCESS==1 ] 
            then
              cd ~/project/backend
              npm install
              npm migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-frontend]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: build-frontend

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-backend]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build --prod
            cd dist
            ls -lrt
      - save_cache:
          paths: [backend/node_modules]
          key: build-backend
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-frontend]
      - run:
          name: Front-end test cases
          command: |
            cd frontend
            npm install jest
            npm run test 
            
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-backend]
      - run:
          name: Backend-end test cases
          command: |
            cd backend
            npm install jest
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-frontend]
      - run:
          name: Frontend vulnerability scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-backend]
      - run:
          name: Backend vulnerability scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeopleproject-backendstack-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeopleproject-frontendstack-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
  
  create_inventory:
    working_directory: ~/project
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip     
      - run:
          name: Add back-end ip to ansible inventory and upload dnsname to memstash
          command: |
             echo "[web]" > .circleci/ansible/inventory.txt
             aws ec2 describe-instances \
               --filter Name=tag:aws:cloudformation:stack-name,Values=udapeopleproject-backendstack* Name=instance-state-name,Values=running \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text >> .circleci/ansible/inventory.txt
               ls -ltr
               pwd
               cat .circleci/ansible/inventory.txt
             
             dnsname=$(aws ec2 describe-instances --filter Name=tag:aws:cloudformation:stack-name,Values=udapeopleproject-backendstack* Name=instance-state-name,Values=running --query 'Reservations[*].Instances[*].PublicDnsName' --output text)
             curl -H "Content-Type: text/plain" -H "token: API_URL-${CIRCLE_WORKFLOW_ID}" --request PUT --data ${dnsname} https://api.memstash.io/values/dnsname   
      - persist_to_workspace:
          root: ~/project
          paths: 
            - .circleci/ansible/inventory.txt
      - destroy-environment 
  
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8c:e5:41:de:cb:53:d8:4c:7c:3f:d4:22:b9:ad:ac:95"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk -Uuv add groff less python py-pip
            pip install awscli
            
      - run:
          name: List files under Ansible Directory
          command: |
            cd .circleci/ansible
            ls -lrt            
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt  configure-server.yml
      - run:
          name: Configure node-exporter
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt  configure-prometheus-node-exporter.yml
      - destroy-environment
 
  run_migrations:
    docker:
      - image: circleci/node:13.8.0
    environment:
      status: 0
    steps:
      - checkout
      - restore_cache:
          keys: [build-backend]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            ls -ltr
            npm run migrations >output.log
            status=`grep -c "has been executed successfully"  output.log`
            cat output.log
            echo $status
            if [[ $status -eq 0 ]]  
            then
              cat /home/circleci/.npm/_logs/*.log
              npm run migrations:revert
              curl -H "Content-Type: text/plain" -H "token: migration-${CIRCLE_WORKFLOW_ID}" --request PUT --data "$status" https://api.memstash.io/values/migrationStatus
            else  
              status=1
              curl -H "Content-Type: text/plain" -H "token: migration-${CIRCLE_WORKFLOW_ID}" --request PUT --data "$status" https://api.memstash.io/values/migrationStatus
            fi

workflows:
  default:
    jobs:
      - build-backend
      - scan-backend:
          requires: [build-backend]
      - run_migrations:
          requires: [scan-backend]
         

          
